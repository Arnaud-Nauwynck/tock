{
    "docs": [
        {
            "location": "/", 
            "text": "Bienvenue dans la documentation de Tock!\n\n\nPr\u00e9sentation\n\n\nTock\n (\nThe Open Conversation Kit\n) est une boite \u00e0 outils permettant de construire des agents conversationnels (ou bots). \n\n\nContrairement \u00e0 la plupart des autres solutions disponibles, il ne d\u00e9pend pas d\u2019API tierces (mais peut en int\u00e9grer ais\u00e9ment si n\u00e9cessaire)\u00a0: il est donc possible de conserver le contr\u00f4le complet de ses donn\u00e9es et de ses algorithmes.\n\n\nL\u2019ensemble est  disponible en open-source sur github : \nhttps://github.com/voyages-sncf-technologies/tock\n sous la \nlicence Apache 2\n. \n\n\nDeux composants majeurs sont disponibles, le moteur NLP (ou \nTALN\n en fran\u00e7ais),\n et un framework conversationnel qui int\u00e8gre le NLP et diff\u00e9rents connecteurs comme Messenger, Google Assistant ou Slack. \n\n\nLa composante NLP est ind\u00e9pendante de la partie conversationnelle. Il est donc possible d'utiliser le NLP sans rentrer dans la complexit\u00e9 de le gestion des conversations.\n\n\n\n\nUne plateforme pour construire des mod\u00e8les d'analyse du language naturel\n\n\nUne interface d'administration\n\n\nL'outil principal est constitu\u00e9 par une interface d'administration qui permet de qualifier des \nphrases afin de construire des mod\u00e8les de traitement automatique du langage naturel ( \nTALN\n ) :\n\n\n\n\nSuivi de qualit\u00e9 des mod\u00e8les\n\n\nCette interface fournit \u00e9galement les outils pour faire \u00e9voluer les mod\u00e8les et permet de monitorer leurs pertinences :\n\n\n\n\nLa construction automatique des mod\u00e8les est bas\u00e9e sur les solutions open-sources (au choix) de \nStanford CoreNLP\n ou d'\nApache OpenNLP\n\n\nUn outil de parsing de dates et de types simples bas\u00e9e sur la librairie open-source \nDuckling\n est \u00e9galement int\u00e9gr\u00e9 dans la stack.\n\n\nLes mod\u00e8les peuvent \u00eatre utilis\u00e9s via l'API mis \u00e0 disposition\n\n\nUn framework conversationnel\n\n\nCe framework est la deuxi\u00e8me brique qui permet de construire des assistants.\n\n\nElle utilise la brique de TALN de Tock via son API.\n\n\nGestion du contexte et de l'historique\n\n\nCe framework permet de g\u00e9rer le contexte des dialogues et l\u2019historique des conversations. \nIl supporte nativement la fusion d'entit\u00e9s \n(par exemple le fait de pr\u00e9ciser la date \"demain\" puis plus tard \"plut\u00f4t le soir\" met automatiquement la valeur de la date \u00e0 jour)\n\n\nConnecteurs tiers\n\n\nDes connecteurs \u00e0 Facebook Messenger, Google Assistant et Slack sont disponibles. \nIl est possible d'en cr\u00e9er facilement d'autres.\n\n\nSuivi des conversations\n\n\nEnfin une interface d'administration est mise \u00e0 disposition et permet de tester le bot et de suivre les conversations du bot. \n\n\nGen\u00e8se du projet\n\n\nLe projet a \u00e9t\u00e9 initialement construit par l'\u00e9quipe Innovation de \nOui.sncf\n \npour motoriser l'analyse des commandes vocales sur ses \napplications mobiles\n puis son \nBot Messenger\n.\n\n\nL'\nassistant Google OUI.sncf\n est \u00e9galement bas\u00e9 sur Tock,\nde m\u00eame que son \nOUIbot\n.\n\n\nIl a \u00e9t\u00e9 open-sourc\u00e9 dans le but de mutualiser l'effort avec d'autres \u00e9quipes qui souhaiterait d\u00e9velopper de nouveaux bots. \n\n\nTechnologies\n\n\nLa plateforme applicative se base sur la \nJVM\n.\n\n\nLe langage de r\u00e9f\u00e9rence est \nKotlin\n.\n\n\nLe reste de la stack applicative est constitu\u00e9e de \nVert.x\n et \nMongoDB\n, m\u00eame si pour l\u2019instant les applications sont essentiellement d\u00e9velopp\u00e9s en \u00ab blocking IO \u00bb. En cible, l\u2019approche \u00ab\u00a0fibers\u00a0\u00bb ( cf \nhttp://docs.paralleluniverse.co/quasar/\n) sera privil\u00e9gi\u00e9e.\n\n\nLes interfaces d'administration sont impl\u00e9ment\u00e9es en \nAngular4\n/\nTypescript\n.\n\n\nCependant il est tout \u00e0 fait possible de d\u00e9velopper des applications en utilisant d'autres languages de programmation via les APIs mis \u00e0 disposition.\n\n\nLes diff\u00e9rents projets open-sourc\u00e9s\n\n\n\n\n\n\nLe projet principal se trouve sous licence \nApache OpenNLP\n. Le code source est disponible sur GitHub : \nhttps://github.com/voyages-sncf-technologies/tock\n\n\n\n\n\n\nCependant une d\u00e9pendance optionnelle,  \nStanford CoreNLP\n, est sous licence \nGPL\n. \n Le code utilisant cette d\u00e9pendance se trouve donc dans un projet \u00e0 part, sous licence GPL : \nhttps://github.com/voyages-sncf-technologies/tock-corenlp\n\n\n\n\n\n\nEnfin deux autres projets sont mis \u00e0 disposition : \n\n\n\n\nUn projet contenant des images dockers pour faciliter la prise en main : \nhttps://github.com/voyages-sncf-technologies/tock-docker\n\n\nUn projet contenant un exemple d'impl\u00e9mentation de bot se basant sur les \nAPI SNCF\n en Open Data : \nhttps://github.com/voyages-sncf-technologies/tock-bot-open-data", 
            "title": "Tock - Documentation"
        }, 
        {
            "location": "/#bienvenue-dans-la-documentation-de-tock", 
            "text": "", 
            "title": "Bienvenue dans la documentation de Tock!"
        }, 
        {
            "location": "/#presentation", 
            "text": "Tock  ( The Open Conversation Kit ) est une boite \u00e0 outils permettant de construire des agents conversationnels (ou bots).   Contrairement \u00e0 la plupart des autres solutions disponibles, il ne d\u00e9pend pas d\u2019API tierces (mais peut en int\u00e9grer ais\u00e9ment si n\u00e9cessaire)\u00a0: il est donc possible de conserver le contr\u00f4le complet de ses donn\u00e9es et de ses algorithmes.  L\u2019ensemble est  disponible en open-source sur github :  https://github.com/voyages-sncf-technologies/tock  sous la  licence Apache 2 .   Deux composants majeurs sont disponibles, le moteur NLP (ou  TALN  en fran\u00e7ais),\n et un framework conversationnel qui int\u00e8gre le NLP et diff\u00e9rents connecteurs comme Messenger, Google Assistant ou Slack.   La composante NLP est ind\u00e9pendante de la partie conversationnelle. Il est donc possible d'utiliser le NLP sans rentrer dans la complexit\u00e9 de le gestion des conversations.", 
            "title": "Pr\u00e9sentation"
        }, 
        {
            "location": "/#une-plateforme-pour-construire-des-modeles-danalyse-du-language-naturel", 
            "text": "", 
            "title": "Une plateforme pour construire des mod\u00e8les d'analyse du language naturel"
        }, 
        {
            "location": "/#une-interface-dadministration", 
            "text": "L'outil principal est constitu\u00e9 par une interface d'administration qui permet de qualifier des \nphrases afin de construire des mod\u00e8les de traitement automatique du langage naturel (  TALN  ) :", 
            "title": "Une interface d'administration"
        }, 
        {
            "location": "/#suivi-de-qualite-des-modeles", 
            "text": "Cette interface fournit \u00e9galement les outils pour faire \u00e9voluer les mod\u00e8les et permet de monitorer leurs pertinences :", 
            "title": "Suivi de qualit\u00e9 des mod\u00e8les"
        }, 
        {
            "location": "/#la-construction-automatique-des-modeles-est-basee-sur-les-solutions-open-sources-au-choix-de-stanford-corenlp-ou-dapache-opennlp", 
            "text": "", 
            "title": "La construction automatique des mod\u00e8les est bas\u00e9e sur les solutions open-sources (au choix) de Stanford CoreNLP ou d'Apache OpenNLP"
        }, 
        {
            "location": "/#un-outil-de-parsing-de-dates-et-de-types-simples-basee-sur-la-librairie-open-source-duckling-est-egalement-integre-dans-la-stack", 
            "text": "", 
            "title": "Un outil de parsing de dates et de types simples bas\u00e9e sur la librairie open-source Duckling est \u00e9galement int\u00e9gr\u00e9 dans la stack."
        }, 
        {
            "location": "/#les-modeles-peuvent-etre-utilises-via-lapi-mis-a-disposition", 
            "text": "", 
            "title": "Les mod\u00e8les peuvent \u00eatre utilis\u00e9s via l'API mis \u00e0 disposition"
        }, 
        {
            "location": "/#un-framework-conversationnel", 
            "text": "Ce framework est la deuxi\u00e8me brique qui permet de construire des assistants.  Elle utilise la brique de TALN de Tock via son API.", 
            "title": "Un framework conversationnel"
        }, 
        {
            "location": "/#gestion-du-contexte-et-de-lhistorique", 
            "text": "Ce framework permet de g\u00e9rer le contexte des dialogues et l\u2019historique des conversations. \nIl supporte nativement la fusion d'entit\u00e9s \n(par exemple le fait de pr\u00e9ciser la date \"demain\" puis plus tard \"plut\u00f4t le soir\" met automatiquement la valeur de la date \u00e0 jour)", 
            "title": "Gestion du contexte et de l'historique"
        }, 
        {
            "location": "/#connecteurs-tiers", 
            "text": "Des connecteurs \u00e0 Facebook Messenger, Google Assistant et Slack sont disponibles. \nIl est possible d'en cr\u00e9er facilement d'autres.", 
            "title": "Connecteurs tiers"
        }, 
        {
            "location": "/#suivi-des-conversations", 
            "text": "Enfin une interface d'administration est mise \u00e0 disposition et permet de tester le bot et de suivre les conversations du bot.", 
            "title": "Suivi des conversations"
        }, 
        {
            "location": "/#genese-du-projet", 
            "text": "Le projet a \u00e9t\u00e9 initialement construit par l'\u00e9quipe Innovation de  Oui.sncf  \npour motoriser l'analyse des commandes vocales sur ses  applications mobiles  puis son  Bot Messenger .  L' assistant Google OUI.sncf  est \u00e9galement bas\u00e9 sur Tock,\nde m\u00eame que son  OUIbot .  Il a \u00e9t\u00e9 open-sourc\u00e9 dans le but de mutualiser l'effort avec d'autres \u00e9quipes qui souhaiterait d\u00e9velopper de nouveaux bots.", 
            "title": "Gen\u00e8se du projet"
        }, 
        {
            "location": "/#technologies", 
            "text": "La plateforme applicative se base sur la  JVM .  Le langage de r\u00e9f\u00e9rence est  Kotlin .  Le reste de la stack applicative est constitu\u00e9e de  Vert.x  et  MongoDB , m\u00eame si pour l\u2019instant les applications sont essentiellement d\u00e9velopp\u00e9s en \u00ab blocking IO \u00bb. En cible, l\u2019approche \u00ab\u00a0fibers\u00a0\u00bb ( cf  http://docs.paralleluniverse.co/quasar/ ) sera privil\u00e9gi\u00e9e.  Les interfaces d'administration sont impl\u00e9ment\u00e9es en  Angular4 / Typescript .  Cependant il est tout \u00e0 fait possible de d\u00e9velopper des applications en utilisant d'autres languages de programmation via les APIs mis \u00e0 disposition.", 
            "title": "Technologies"
        }, 
        {
            "location": "/#les-differents-projets-open-sources", 
            "text": "Le projet principal se trouve sous licence  Apache OpenNLP . Le code source est disponible sur GitHub :  https://github.com/voyages-sncf-technologies/tock    Cependant une d\u00e9pendance optionnelle,   Stanford CoreNLP , est sous licence  GPL . \n Le code utilisant cette d\u00e9pendance se trouve donc dans un projet \u00e0 part, sous licence GPL :  https://github.com/voyages-sncf-technologies/tock-corenlp    Enfin deux autres projets sont mis \u00e0 disposition :    Un projet contenant des images dockers pour faciliter la prise en main :  https://github.com/voyages-sncf-technologies/tock-docker  Un projet contenant un exemple d'impl\u00e9mentation de bot se basant sur les  API SNCF  en Open Data :  https://github.com/voyages-sncf-technologies/tock-bot-open-data", 
            "title": "Les diff\u00e9rents projets open-sourc\u00e9s"
        }, 
        {
            "location": "/pour-commencer/", 
            "text": "Commencer \u00e0 utiliser Tock\n\n\nImages Docker\n\n\nDes images docker sont mises \u00e0 disposition pour faciliter le d\u00e9marrage.\n\n\nCes images sont disponibles dans le \nHub Docker\n.\n\n\nLe code source utilis\u00e9 pour construire ces images, ainsi que les fichiers \ndocker-compose\n \nutilis\u00e9s pour d\u00e9marrer l'ensemble de la boite \u00e0 outils \nTock\n sont disponibles dans le respository github \nhttps://github.com/voyages-sncf-technologies/tock-docker\n.\n\n\nD\u00e9marrer l'interface d'administration\n\n\n    \n#get the last docker-compose file\n\n    curl -o docker-compose.yml https://raw.githubusercontent.com/voyages-sncf-technologies/tock-docker/master/docker-compose.yml\n    \n#get the last tag\n\n    curl -o .env https://raw.githubusercontent.com/voyages-sncf-technologies/tock-docker/master/.env\n    \n#launch the stack\n\n    docker-compose up\n\n\n\n\n\nL'interface d'administration NLP est maintenant disponible sur le port 80 :\n\n\n\n\nIl est donc possible de commencer \u00e0 qualifier et \u00e0 cr\u00e9er des intentions et des entit\u00e9s : \n\n\n\n\nBot d'exemple bas\u00e9 sur des API Open Data\n\n\nUn bot d'exemple utilisant Tock est mis \u00e0 disposition\u00a0sur github : \nhttps://github.com/voyages-sncf-technologies/tock-bot-open-data\n.\n\n\nIl se base sur les \nAPI Open Data de la SNCF\n, et pr\u00e9sente des fonctionnalit\u00e9s minimales permettant de d\u00e9montrer l\u2019usage de Tock. \n\n\nCe bot sera bient\u00f4t disponible sur Facebook Messenger et les futures autres connecteurs mis \u00e0 disposition. L'interface d'administration d\u00e9di\u00e9e sera \u00e9galement disponible en lecture seule sur le web.\n\n\nUne image docker est mis \u00e0 disposition pour le lancer directement. Les instructions pour la d\u00e9marrer sont pr\u00e9cis\u00e9s dans le \nprojet github contenant les images docker\n.", 
            "title": "Pour commencer"
        }, 
        {
            "location": "/pour-commencer/#commencer-a-utiliser-tock", 
            "text": "", 
            "title": "Commencer \u00e0 utiliser Tock"
        }, 
        {
            "location": "/pour-commencer/#images-docker", 
            "text": "Des images docker sont mises \u00e0 disposition pour faciliter le d\u00e9marrage.  Ces images sont disponibles dans le  Hub Docker .  Le code source utilis\u00e9 pour construire ces images, ainsi que les fichiers  docker-compose  \nutilis\u00e9s pour d\u00e9marrer l'ensemble de la boite \u00e0 outils  Tock  sont disponibles dans le respository github  https://github.com/voyages-sncf-technologies/tock-docker .", 
            "title": "Images Docker"
        }, 
        {
            "location": "/pour-commencer/#demarrer-linterface-dadministration", 
            "text": "#get the last docker-compose file \n    curl -o docker-compose.yml https://raw.githubusercontent.com/voyages-sncf-technologies/tock-docker/master/docker-compose.yml\n     #get the last tag \n    curl -o .env https://raw.githubusercontent.com/voyages-sncf-technologies/tock-docker/master/.env\n     #launch the stack \n    docker-compose up  L'interface d'administration NLP est maintenant disponible sur le port 80 :   Il est donc possible de commencer \u00e0 qualifier et \u00e0 cr\u00e9er des intentions et des entit\u00e9s :", 
            "title": "D\u00e9marrer l'interface d'administration"
        }, 
        {
            "location": "/pour-commencer/#bot-dexemple-base-sur-des-api-open-data", 
            "text": "Un bot d'exemple utilisant Tock est mis \u00e0 disposition\u00a0sur github :  https://github.com/voyages-sncf-technologies/tock-bot-open-data .  Il se base sur les  API Open Data de la SNCF , et pr\u00e9sente des fonctionnalit\u00e9s minimales permettant de d\u00e9montrer l\u2019usage de Tock.   Ce bot sera bient\u00f4t disponible sur Facebook Messenger et les futures autres connecteurs mis \u00e0 disposition. L'interface d'administration d\u00e9di\u00e9e sera \u00e9galement disponible en lecture seule sur le web.  Une image docker est mis \u00e0 disposition pour le lancer directement. Les instructions pour la d\u00e9marrer sont pr\u00e9cis\u00e9s dans le  projet github contenant les images docker .", 
            "title": "Bot d'exemple bas\u00e9 sur des API Open Data"
        }
    ]
}